// <auto-generated />
using System;
using LifeOptimizer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LifeOptimizer.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250507161029_defaultuseridadded")]
    partial class defaultuseridadded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LifeOptimizer.Core.Entities.Dwelling", b =>
                {
                    b.Property<int>("DwellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DwellingId"));

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DwellingId");

                    b.ToTable("Dwellings");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<int?>("StorageElementId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("StorageElementId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int?>("DwellingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("DwellingId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.StorageElement", b =>
                {
                    b.Property<int>("StorageElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageElementId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StorageElementId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RoomId");

                    b.ToTable("StorageElements");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.Item", b =>
                {
                    b.HasOne("LifeOptimizer.Core.Entities.StorageElement", "StorageElement")
                        .WithMany("Items")
                        .HasForeignKey("StorageElementId");

                    b.Navigation("StorageElement");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.Room", b =>
                {
                    b.HasOne("LifeOptimizer.Core.Entities.Dwelling", "dwelling")
                        .WithMany("Rooms")
                        .HasForeignKey("DwellingId");

                    b.Navigation("dwelling");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.StorageElement", b =>
                {
                    b.HasOne("LifeOptimizer.Core.Entities.StorageElement", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("LifeOptimizer.Core.Entities.Room", "Room")
                        .WithMany("StorageElements")
                        .HasForeignKey("RoomId");

                    b.Navigation("Parent");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.Dwelling", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.Room", b =>
                {
                    b.Navigation("StorageElements");
                });

            modelBuilder.Entity("LifeOptimizer.Core.Entities.StorageElement", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
